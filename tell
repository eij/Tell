#!/bin/bash

VERSION="1.3"

# Settings

	USE_HEAD=y
	USE_PLURAL=n

	STRIP_PRETAGS=y
	STRIP_SUBVERSIONS=y

# List of distro release version locations.

DISTROS=(
	'debian_version,Debian'		# Debian
	'debian_release,Debian'
	'lsb-release,Ubuntu'			# Ubuntu
)

# Array PROCESS | PACKAGE,[n] | DISPLAY

ENVIRONMENTS=(
	'nautilus|gnome-core,gnome-desktop-environment|Gnome'
	'dolphin|kde-core,kde-desktop|KDE'
)

BROWSERS=(
	'chrome|google-chrome-stable,google-chrome-unstable,google-chrome-beta|Google Chrome'
	'chromium|chromium-browser|Chromium'
	'firefox|firefox,iceweasel|Firefox'
)

DOCKS=(
	'docky|docky|Docky'
	'avant-window-navigator|avant-window-navigator|AWN'
	'cairo|cairo-dock,cairo-dock-core,cairo-dock-dev|Cairo-Dock'
	'kibadock|kiba-dock|Kiba-Dock'
)

function process_search {
	P=`ps aux | grep -v 'grep' | grep -m1 $1`

	if [ -z "$P" ]; then
		return 0
	else
		return 1
	fi
}

function process_name {
	echo "$1" | cut -d '|' -f3
}

function process_version {
	L=`echo $1 | cut -d '|' -f2`
	S=`echo $L | awk -F ',' '{print NF}'`

	for (( K=0; K < $S; K++ ))
	do

		PACKAGE=`echo $L | cut -d ',' -f$((K + 1))`
		PACKAGE_VERSION=`dpkg -l | grep -m1 $PACKAGE | awk '{print $3}'`

		if [ -n "$PACKAGE_VERSION" ]; then

			if [ "$STRIP_PRETAGS" == "y" ]; then
				PACKAGE_VERSION=`echo $PACKAGE_VERSION | sed 's/[0-9]://'`
			fi

			if [ "$STRIP_SUBVERSIONS" == "y" ]; then
				PACKAGE_VERSION=`echo $PACKAGE_VERSION | cut -d '-' -f1 | cut -d '+' -f1`
			fi

			echo $PACKAGE_VERSION

			K=$S

		fi

	done
}

function show_help {
	echo "Usage: tell [OPTIONS]"
	echo
	echo "  -a			show (known) applications in use"
	echo
	echo "  -b			show open browser(s)"
	echo "  -d			show open dock(s)"
	echo
	echo "  -h			display this help"
}

function show_distro {
	unset V

	for each in ${DISTROS[*]}; do
		D=`echo $each | cut -d ',' -f1`

		[ "$V" ] && break || [ -r /etc/$D ] && V=$(awk '{print $1}' /etc/$D)
	done

	O=`echo $each | cut -d ',' -f2`

	echo "  $O $V"
	echo "  `uname -n` @ `uname -r`"
}

function show_task {
	unset OUT
	eval SIZE=\${#${1}[*]}

	for (( C=0; C < $SIZE; C++ ))
	do

		eval CURRENT=\${${1}[$C]}

		PROCESS=`echo $CURRENT | cut -d '|' -f1`

		process_search $PROCESS
		S=$?

		if [ "$S" == 1 ]; then
			OUT="${OUT}   `process_name "$CURRENT"`|        `process_version "$CURRENT"`\n"
		fi

	done

	if [ "$2" == "R" ]; then
		echo "$OUT"
	else
		echo -e "$OUT" | column -s '|' -t
	fi
}

function show_all {
	Y="${Y}   `show_task ENVIRONMENTS R`|   `show_task BROWSERS R`|   `show_task DOCKS R`"

	show_distro

	echo

	echo -e "$Y" | column -s '|' -t
}


while getopts  "habde" OPT
do

	case $OPT in
		h)
			show_help

			exit 0
			;;
		a)
			echo

			if [ "$USE_HEAD" == "y" ]; then
				echo "	Apps"
				echo
			fi

			APPS="${APPS}   `show_task BROWSERS R`|   `show_task DOCKS R`"
			echo -e "$APPS" | column -s '|' -t

			echo
			;;
		b)
			echo

			if [ "$USE_HEAD" == "y" ]; then

				if [ "$USE_PLURAL" == "y" ]; then
					echo "	Browser(s)"
				else
					echo "	Browser"
				fi

				echo

			fi

			show_task BROWSERS
			echo
			;;
		d)
			echo

			if [ "$USE_HEAD" == "y" ]; then

				if [ "$USE_PLURAL" == "y" ]; then
					echo "	Dock(s)"
				else
					echo "	Dock"
				fi

				echo

			fi

			show_task DOCKS
			echo
			;;
		e)
			echo

			if [ "$USE_HEAD" == "y" ]; then
				echo "	Environment"
				echo
			fi

			show_task ENVIRONMENTS
			echo
			;;
	esac

done

if [ "$OPTIND" -eq "1" ]; then
	echo
	show_all
	echo
fi

exit 0
